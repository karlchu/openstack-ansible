---
- name: Create the neutron database
  mysql_db: name={{ neutron_db }} login_user=root login_password={{ MYSQL_ROOT_PASSWORD }}
- name: Ensure neutron database user exist
  mysql_user: |
    name={{ neutron_db_user }}
    password={{ NEUTRON_DBPASS }}
    host={{ item }}
    priv={{ neutron_db }}.*:ALL
    login_host={{ db_host }}
    login_user=root
    login_password={{ MYSQL_ROOT_PASSWORD }}
  with_items:
  - localhost
  - "%"

- name: "Ensure the 'neutron' user exists"
  keystone_user: >
    user=neutron password={{ NEUTRON_PASS }} email={{ ADMIN_EMAIL }} tenant=service
    token={{ KEYSTONE_ADMIN_TOKEN }}
    endpoint=http://{{ keystone_host }}:{{ keystone_admin_port }}/v2.0
  delegate_to: "{{ keystone_host }}"

- name: "Ensure the 'admin' role exists"
  keystone_user: >
    role=admin user=neutron tenant=service
    token={{ KEYSTONE_ADMIN_TOKEN }}
    endpoint=http://{{ keystone_host }}:{{ keystone_admin_port }}/v2.0
  delegate_to: "{{ keystone_host }}"

- name: Create a service entry for the OpenStack Networking
  shell: |
    if ! keystone service-get neutron
    then 
      keystone service-create --name=neutron --type=network --description="OpenStack Networking"
    fi
  environment: token_auth_env
  delegate_to: "{{ keystone_host }}"

- name: Check OpenStack Networking API endpoint exists
  shell: "keystone --os-username=admin --os-password={{ ADMIN_PASS }} --os-auth-url=http://{{ keystone_host }}:{{ keystone_admin_port }}/v2.0 --os-tenant-name=admin endpoint-get --service=network"
  register: check_endpoint_result
  ignore_errors: True
  delegate_to: "{{ keystone_host }}"

- name: Specify API endpoints for network service
  when: check_endpoint_result.rc != 0
  shell: |
    export SERVICE_ID=$(keystone service-list | awk '/ network / {print $2}')
    keystone endpoint-create --service-id=${SERVICE_ID} --publicurl=http://{{ neutron_controller_host }}:{{ neutron_controller_port }}/v2.0/%\(tenant_id\)s --internalurl=http://{{ neutron_controller_host }}:{{ neutron_controller_port }}/v2.0/%\(tenant_id\)s --adminurl=http://{{ neutron_controller_host }}:{{ neutron_controller_port }}/v2.0/%\(tenant_id\)s
  environment: token_auth_env
  delegate_to: "{{ keystone_host }}"

- name: Ensure relavant packages are installed
  yum: "name={{ item }} state=installed"
  with_items: 
  - openstack-neutron
  - openstack-neutron-ml2
  - python-neutronclient

- name: Get Nova admin tenant ID
  shell: |
    keystone tenant-list | awk '/ service / { print $2 }'
  register: nova_admin_tenant_id
  environment: token_auth_env
  delegate_to: "{{ keystone_host }}"

- name: Configure Networking to use the database
  include: ../../../tasks/ini-settings.yml
  vars:
    file: /etc/neutron/neutron.conf
    sections:
    - name: database
      settings:
      - [ "connection", "mysql://{{ neutron_db_user }}:{{ NEUTRON_DBPASS }}@{{ db_host }}/{{ neutron_db }}" ]
  notify: Restart neutron services

- name: Configure Networking to notify Compute about network topology changes
  include: ../../../tasks/ini-settings.yml
  vars:
    file: /etc/neutron/neutron.conf
    sections:
    - name: DEFAULT
      settings:
      - [ "notify_nova_on_port_status_changes", "True" ]
      - [ "notify_nova_on_port_data_changes", "True" ]
      - [ "nova_url", "http://{{ nova_controller_host }}:8774/v2" ]
      - [ "nova_admin_username", "nova" ]
      - [ "nova_admin_tenant_id", "{{ nova_admin_tenant_id.stdout }}" ]
      - [ "nova_admin_password", "{{ NOVA_PASS }}" ]
      - [ "nova_admin_auth_url", "http://{{ keystone_host }}:{{ keystone_admin_port }}/v2.0" ]
  notify: Restart neutron services

- name: Configure Compute to use Networking
  include: ../../../tasks/neutron-config/common-compute.yml
  notify: Restart compute services
