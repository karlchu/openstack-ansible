---
- name: Ensure relavant packages are installed
  yum: "name={{ item }} state=installed"
  with_items: 
  - openstack-keystone
  - python-keystoneclient

- name: Configure keystone
  template: |
    dest=/etc/keystone/keystone.conf
    src=keystone.conf
    backup=yes
  notify: Restart keystone service

- include: ../../../tasks/create-database-and-user.yml
  vars:
    db_name: "{{ keystone_db }}"
    db_user: "{{ keystone_db_user }}"
    db_password: "{{ KEYSTONE_DBPASS }}"

- name: Change ownership of all files to keystone
  file: path=/etc/keystone recurse=yes owner=keystone group=keystone state=directory

- name: DB sync for keystone
  sudo: yes
  sudo_user: keystone
  shell: |
    creates=/etc/keystone/db.synced
    /usr/bin/keystone-manage db_sync
    date >> /etc/keystone/db.synced

- name: Create certs for the keystone
  shell: |
    creates=/etc/keystone/ssl/certs/ca.pem 
    /usr/bin/keystone-manage pki_setup --keystone-user keystone --keystone-group keystone
    chmod 777 /var/lock
    chown -R keystone:keystone /etc/keystone/ssl
    chmod -R o-rwx /etc/keystone/ssl
  notify: Restart keystone service

- name: Enable and start the keystone service
  service: name=openstack-keystone enabled=yes state=started

- name: Set up cron job to purge expired tokens hourly
  cron: |
    name="Purge expired keystone tokens"
    user=keystone
    special_time=hourly
    job="/usr/bin/keystone-manage token_flush >/var/log/keystone/keystone-tokenflush.log 2>&1"

- name: "Ensure the 'admin' tenant exists"
  keystone_user: >
    tenant=admin tenant_description="Admin Tenant"
    token={{ KEYSTONE_ADMIN_TOKEN }}
    endpoint=http://localhost:{{ keystone_admin_port }}/v2.0

- name: "Ensure the 'admin' user exists"
  keystone_user: >
    user=admin password={{ ADMIN_PASS }} email={{ ADMIN_EMAIL }} tenant=admin
    token={{ KEYSTONE_ADMIN_TOKEN }}
    endpoint=http://localhost:{{ keystone_admin_port }}/v2.0

- name: "Ensure the 'admin' role exists"
  keystone_user: >
    role=admin user=admin tenant=admin
    token={{ KEYSTONE_ADMIN_TOKEN }}
    endpoint=http://localhost:{{ keystone_admin_port }}/v2.0

- name: "Ensure the 'demo' tenant exists"
  keystone_user: >
    tenant=demo tenant_description="Demo Tenant"
    token={{ KEYSTONE_ADMIN_TOKEN }}
    endpoint=http://localhost:{{ keystone_admin_port }}/v2.0

- name: "Ensure the 'demo' user exists"
  keystone_user: >
    user=demo password={{ DEMO_PASS }} email={{ DEMO_EMAIL }} tenant=demo
    token={{ KEYSTONE_ADMIN_TOKEN }}
    endpoint=http://localhost:{{ keystone_admin_port }}/v2.0

- name: "Ensure the 'admin' role exists"
  keystone_user: >
    role=demo user=demo tenant=demo
    token={{ KEYSTONE_ADMIN_TOKEN }}
    endpoint=http://localhost:{{ keystone_admin_port }}/v2.0

- name: "Ensure the 'service' tenant exists"
  keystone_user: >
    tenant=service tenant_description="Service Tenant"
    token={{ KEYSTONE_ADMIN_TOKEN }}
    endpoint=http://localhost:{{ keystone_admin_port }}/v2.0

- name: Create a service entry for the Identity Service
  include: ../../../tasks/keystone_service.yml
  vars:
    name: keystone
    type: identity
    description: OpenStack Identity

- name: Create API endpoint for identity service
  include: ../../../tasks/api_endpoint.yml
  vars:
    service: identity
    endpoint:
      host: "{{ keystone_host }}"
      port: "{{ keystone_port }}"
      path: "/v2.0"
      admin_port: "{{ keystone_admin_port }}"
