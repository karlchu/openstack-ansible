---
- name: Ensure relavant packages are installed
  yum: "name={{ item }} state=installed"
  with_items: 
  - openstack-keystone
  - python-keystoneclient

- name: Configure keystone
  template: |
    dest=/etc/keystone/keystone.conf
    src=keystone.conf
    backup=yes
  notify: Restart keystone service

- name: Create the keystone database
  mysql_db: name={{ keystone_db }} login_user=root login_password={{ MYSQL_ROOT_PASSWORD }}
- name: Ensure keystone database user exist
  mysql_user: |
    name={{ keystone_db_user }}
    password={{ KEYSTONE_DBPASS }}
    host={{ item }}
    priv={{ keystone_db }}.*:ALL
    login_host={{ db_host }}
    login_user=root
    login_password={{ MYSQL_ROOT_PASSWORD }}
  with_items:
  - localhost
  - "%"

- name: Change ownership of all files to keystone
  file: path=/etc/keystone recurse=yes owner=keystone group=keystone state=directory

- name: DB sync for keystone
  sudo: yes
  sudo_user: keystone
  shell: |
    creates=/etc/keystone/db.synced
    /usr/bin/keystone-manage db_sync
    date >> /etc/keystone/db.synced

- name: Create certs for the keystone
  shell: |
    creates=/etc/keystone/ssl/certs/ca.pem 
    /usr/bin/keystone-manage pki_setup --keystone-user keystone --keystone-group keystone
    chmod 777 /var/lock
    chown -R keystone:keystone /etc/keystone/ssl
    chmod -R o-rwx /etc/keystone/ssl
  notify: Restart keystone service

- name: Enable and start the keystone service
  service: name=openstack-keystone enabled=yes state=started

- name: Set up cron job to purge expired tokens hourly
  cron: |
    name="Purge expired keystone tokens"
    user=keystone
    special_time=hourly
    job="/usr/bin/keystone-manage token_flush >/var/log/keystone/keystone-tokenflush.log 2>&1"

- name: "Ensure the 'admin' tenant exists"
  keystone_user: >
    tenant=admin tenant_description="Admin Tenant"
    token={{ KEYSTONE_ADMIN_TOKEN }}
    endpoint=http://localhost:{{ keystone_admin_port }}/v2.0

- name: "Ensure the 'admin' user exists"
  keystone_user: >
    user=admin password={{ ADMIN_PASS }} email={{ ADMIN_EMAIL }} tenant=admin
    token={{ KEYSTONE_ADMIN_TOKEN }}
    endpoint=http://localhost:{{ keystone_admin_port }}/v2.0

- name: "Ensure the 'admin' role exists"
  keystone_user: >
    role=admin user=admin tenant=admin
    token={{ KEYSTONE_ADMIN_TOKEN }}
    endpoint=http://localhost:{{ keystone_admin_port }}/v2.0

- name: "Ensure the 'demo' tenant exists"
  keystone_user: >
    tenant=demo tenant_description="Demo Tenant"
    token={{ KEYSTONE_ADMIN_TOKEN }}
    endpoint=http://localhost:{{ keystone_admin_port }}/v2.0

- name: "Ensure the 'demo' user exists"
  keystone_user: >
    user=demo password={{ DEMO_PASS }} email={{ DEMO_EMAIL }} tenant=demo
    token={{ KEYSTONE_ADMIN_TOKEN }}
    endpoint=http://localhost:{{ keystone_admin_port }}/v2.0

- name: "Ensure the 'admin' role exists"
  keystone_user: >
    role=demo user=demo tenant=demo
    token={{ KEYSTONE_ADMIN_TOKEN }}
    endpoint=http://localhost:{{ keystone_admin_port }}/v2.0

- name: "Ensure the 'service' tenant exists"
  keystone_user: >
    tenant=service tenant_description="Service Tenant"
    token={{ KEYSTONE_ADMIN_TOKEN }}
    endpoint=http://localhost:{{ keystone_admin_port }}/v2.0

- name: Create a service entry for the Identity Service
  shell: |
    export OS_SERVICE_TOKEN={{ KEYSTONE_ADMIN_TOKEN }}
    export OS_SERVICE_ENDPOINT=http://localhost:{{ keystone_admin_port }}/v2.0
    if ! keystone service-get keystone
    then 
      keystone service-create --name=keystone --type=identity --description="OpenStack Identity"
    fi

- name: Check identity service API endpoint exists
  shell: "keystone --os-username=admin --os-password={{ ADMIN_PASS }} --os-auth-url=http://localhost:{{ keystone_admin_port }}/v2.0 --os-tenant-name=admin endpoint-get --service=identity"
  register: check_endpoint_result
  ignore_errors: True

- name: Specify API endpoints for identity service
  when: check_endpoint_result.rc != 0
  shell: |
    export OS_SERVICE_TOKEN={{ KEYSTONE_ADMIN_TOKEN }}
    export OS_SERVICE_ENDPOINT=http://localhost:{{ keystone_admin_port }}/v2.0
    export SERVICE_ID=$(keystone service-list | awk '/ identity / {print $2}')
    keystone endpoint-create --service-id=${SERVICE_ID} --publicurl=http://controller:5000/v2.0 --internalurl=http://controller:5000/v2.0 --adminurl=http://controller:{{ keystone_admin_port }}/v2.0
